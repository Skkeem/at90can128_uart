
hw1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000060  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000192  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010c  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000154  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ad  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005e  00000000  00000000  00000759  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  8c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  90:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e2       	ldi	r30, 0x28	; 40
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 30       	cpi	r26, 0x0E	; 14
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  be:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1

int main(void)
{
	putString("Hello world!");
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 85 00 	call	0x10a	; 0x10a <putString>
}
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret

000000d4 <initUart>:
#include "serial.h"

void initUart (unsigned int baud)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (0xf & (baud >> 8));
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) (0xff & baud);
  da:	80 93 c4 00 	sts	0x00C4, r24
	/*
	 * Enable Tx, Rx as an asynchronous mode
	 * Frame format : 8 data, no parity, 1 stop bits
	 * Disable all interrupts
	 */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); //0x18
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 3 << UCSZ0; //0x06
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24

//	UCSR0C = (0 << UMSEL0) | (0 << UPM0) | (0 << USBS0) | (3 << UCSZ0); //0x06
//	UCSR0B = (0 << RXCIE0) | (0 << TXCIE0) | (0 << UDRIE0) | (1 << RXEN0) | (1 << TXEN0) | (0 << UCSZ02); //0x18
}
  ea:	08 95       	ret

000000ec <putChar>:

void putChar (char data)
{
  ec:	98 2f       	mov	r25, r24
	/* Wait until the transmit buffer is empty */
	while (!(UCSR0A & (1 << UDRE0)))
  ee:	80 91 c0 00 	lds	r24, 0x00C0
  f2:	85 ff       	sbrs	r24, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <putChar+0x2>
		;

	UDR0 = data;
  f6:	90 93 c6 00 	sts	0x00C6, r25
}
  fa:	08 95       	ret

000000fc <getChar>:

char getChar (void)
{
	/* Wait until the data is received */
	while (!(UCSR0A & (1 << RXC0)))
  fc:	80 91 c0 00 	lds	r24, 0x00C0
 100:	87 ff       	sbrs	r24, 7
 102:	fc cf       	rjmp	.-8      	; 0xfc <getChar>
		;

	return UDR0;
 104:	80 91 c6 00 	lds	r24, 0x00C6
}
 108:	08 95       	ret

0000010a <putString>:

void putString (char *str)
{
 10a:	fc 01       	movw	r30, r24
 10c:	07 c0       	rjmp	.+14     	; 0x11c <putString+0x12>
}

void putChar (char data)
{
	/* Wait until the transmit buffer is empty */
	while (!(UCSR0A & (1 << UDRE0)))
 10e:	80 91 c0 00 	lds	r24, 0x00C0
 112:	85 ff       	sbrs	r24, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <putString+0x4>
}

void putString (char *str)
{
	while (*str)
		putChar(*str++);
 116:	31 96       	adiw	r30, 0x01	; 1
{
	/* Wait until the transmit buffer is empty */
	while (!(UCSR0A & (1 << UDRE0)))
		;

	UDR0 = data;
 118:	90 93 c6 00 	sts	0x00C6, r25
	return UDR0;
}

void putString (char *str)
{
	while (*str)
 11c:	90 81       	ld	r25, Z
 11e:	99 23       	and	r25, r25
 120:	b1 f7       	brne	.-20     	; 0x10e <putString+0x4>
		putChar(*str++);
}
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
